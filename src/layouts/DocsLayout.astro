---
import { type CollectionEntry, getCollection } from 'astro:content'
import CommandBar from '@/components/docs/CommandBar.astro'
import DocsContent from '@/components/docs/DocsContent.astro'
import DocsFooter from '@/components/docs/DocsFooter.astro'
import DocsHeader from '@/components/docs/DocsHeader.astro'
import DocsSidebar from '@/components/docs/DocsSidebar.astro'
import BaseLayout from '@/layouts/BaseLayout.astro'

type DocType = CollectionEntry<'docs'>

interface Props {
    frontmatter: {
        title: string
        description?: string
        section?: string
        status?: 'draft' | 'published'
    }
    prevDoc?: {
        slug: string
        data: {
            title: string
        }
    }
    nextDoc?: {
        slug: string
        data: {
            title: string
        }
    }
}

const { frontmatter, prevDoc, nextDoc } = Astro.props
const currentPath = Astro.url.pathname
const currentSection = currentPath.split('/')[2]

// Get and organize docs
const docs = await getCollection('docs', ({ id, data }) => {
    const isPublished = import.meta.env.DEV || data.status === 'published'
    const matchSection = id.startsWith(currentSection)
    return isPublished && matchSection
})

const sections = docs.reduce(
    (acc, doc) => {
        const section = doc.data.section || 'Uncategorized'
        if (!acc[section]) acc[section] = []
        acc[section].push(doc)
        return acc
    },
    {} as Record<string, DocType[]>
)

const sortedSections = Object.entries(sections)
    .sort(([, itemsA], [, itemsB]) => {
        const orderA = itemsA[0]?.data.sectionOrder || 99
        const orderB = itemsB[0]?.data.sectionOrder || 99
        return orderA - orderB
    })
    .map(([section, items]) => [
        section,
        items.sort((a, b) => (a.data.order || 99) - (b.data.order || 99)),
    ]) as [string, DocType[]][]

// Generate table of contents
const content = await Astro.slots.render('default')
const headings = content.match(/<h[2-3][^>]*>(.*?)<\/h[2-3]>/g) || []
const toc = headings.map((heading) => {
    const level = heading.charAt(2)
    const title = heading.replace(/<[^>]*>/g, '')
    const id = title.toLowerCase().replace(/[^a-z0-9]+/g, '-')
    return { level, title, id }
})
---

<BaseLayout title={`${frontmatter.title} - Documentation - Saastro`}>
    <div class="relative w-full min-h-screen bg-white dark:bg-gray-950">
        <DocsHeader />
        <CommandBar />
        <div class="flex max-w-screen-2xl mx-auto">
            <DocsSidebar sections={sortedSections} currentPath={currentPath} />
            <main class="flex-1">
                <DocsContent
                    doc={{ data: frontmatter } as DocType}
                    prevDoc={prevDoc}
                    nextDoc={nextDoc}
                    toc={toc}
                >
                    <slot />
                </DocsContent>
                <DocsFooter />
            </main>
        </div>
    </div>
</BaseLayout>

<style>
  ::-webkit-scrollbar {
    @apply w-2;
  }

  ::-webkit-scrollbar-track {
    @apply bg-gray-100 dark:bg-gray-900;
  }

  ::-webkit-scrollbar-thumb {
    @apply bg-gray-300 dark:bg-gray-700 rounded-full;
  }

  ::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-400 dark:bg-gray-600;
  }

  * {
    scrollbar-width: thin;
    scrollbar-color: theme(colors.gray.300) theme(colors.gray.100);
  }

  .dark * {
    scrollbar-color: theme(colors.gray.700) theme(colors.gray.900);
  }
</style>
